---
- name: Install cryptsetup
  package:
    name: cryptsetup
    state: present

- name: Install LVM
  package:
    name: lvm2
    state: present

- name: Create backup directory
  file:
    path: /var/lib/backuppc
    state: directory
    recurse: no

- name: Mount backup directory by UUID
  mount:
    name: /var/lib/backuppc
    src: /dev/mapper/BACKUPPC--VG-BACKUPPC--LV--DATA
    fstype: ext4
    opts: noatime,noauto
    state: mounted
    passno: 2

- name: Install nginx-light
  package:
    name: nginx-light
    state: present

- name: Install nginx fcgiwrap
  package:
    name: fcgiwrap
    state: present

- name: Copy backuppc nginx site configuration
  copy:
    src: "{{ role_path }}/files/etc/nginx/sites-available/backuppc"
    dest: /etc/nginx/sites-available/backuppc
    owner: root
    group: root
    mode: 0644
  notify:
    - Reload service nginx

- name: Disable nginx default site configuration
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Enable backuppc nginx site configuration
  file:
    src: /etc/nginx/sites-available/backuppc
    dest: /etc/nginx/sites-enabled/backuppc
    owner: root
    group: root
    state: link
  notify:
    - Reload service nginx

# User authentication
- name: Install python-passlib
  package:
    name: python-passlib
    state: present

- htpasswd:
    path: /etc/backuppc/htpasswd
    name: admin
    password: 'test'
    owner: root
    group: www-data
    mode: 0640
  notify:
    - Reload service nginx

# Create SSL certificates
- name: Install openssl
  package:
    name: "{{ item }}"
    state: latest
  with_items:
    - openssl
    - python-openssl

- name: Generate an OpenSSL private key
  openssl_privatekey:
    path: "/etc/ssl/private/{{ ansible_hostname }}.pem"

- name: Create directory for certificate signing requests
  file:
    path: /etc/ssl/csr
    state: directory
    mode: 0755

- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: "/etc/ssl/csr/{{ ansible_hostname }}.csr"
    privatekey_path: "/etc/ssl/private/{{ ansible_hostname }}.pem"
    country_name: "DE"
    organization_name: "bachert.it"
    email_address: "postmaster@bachert.it"
    common_name: "{{ ansible_fqdn }}"
  notify:
    - Generate a self signed certificate
    - Reload service nginx
  
- name: Install backuppc
  package:
    name: backuppc
    state: present

- name: Install backuppc rsync perl library
  package:
    name: libfile-rsyncp-perl
    state: present

- name: Generate SSH keys for backuppc user
  user:
    name: backuppc
    ssh_key_bits: 4096
    generate_ssh_key: yes

- name: Get public SSH key of backuppc user
  fetch:
    src: /var/lib/backuppc/.ssh/id_rsa.pub
    dest: "{{ playbook_dir }}/files/backuppc-id_rsa.pub"
    flat: yes

- name: Assign permissions to mounted backup directory
  file:
    path: /var/lib/backuppc
    state: directory
    mode: 0750
    recurse: no
  notify: 
    - Reload service backuppc

# Commented as the recursive operation is time consuming
# Only required if UIDs changed, for example after server migration/restore
#
#- name: Assign correct user to mounted backup directory
#  file:
#    path: /var/lib/backuppc
#    owner: backuppc
#    group: backuppc
#    recurse: yes
#  notify:
#    - Reload service backuppc

- name: Copy backuppc configuration
  copy:
    src: "{{ role_path }}/files/etc/backuppc/config.pl"
    dest: "/etc/backuppc/config.pl"
    mode: 0640
    owner: backuppc
    group: www-data
  notify:
    - Reload service backuppc

- name: Copy backuppc hosts configuration
  copy:
    src: "{{ role_path }}/files/etc/backuppc/{{ item }}"
    dest: "/etc/backuppc/"
    mode: 0640
    owner: backuppc
    group: www-data
  with_items:
    - "hosts"
    - "eselgurke.local.pl"
    - "postesel.bachert.it.pl"
  notify:
    - Reload service backuppc

- name: Copy hdparm configuration
  copy:
    src: "{{ role_path }}/files/etc/hdparm.conf"
    dest: "/etc/hdparm.conf"
    mode: 0644
    owner: root
    group: root
